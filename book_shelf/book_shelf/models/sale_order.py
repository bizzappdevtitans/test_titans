from datetime import date

from odoo import api, fields, models


class SaleOrder(models.Model):
    _inherit = "sale.order"
    book_shelf_count = fields.Integer(compute="_compute_book")

    @api.depends("client_order_ref")
    def _compute_book(self):
        """method to count book shelf issued to partner used in smart button T-00419"""
        for record in self:
            record.book_shelf_count = self.env["book.shelf"].search_count(
                [("sequence", "=", record.client_order_ref)]
            )

    def _set_book(self):
        """method to set issue date in book shelf line and  changing state to confirm
        of book shelf associate to it T-00419"""
        book = (
            self.env["book.shelf"]
            .search([("sequence", "=", self.client_order_ref)])
            .id,
        )
        if book:
            book_line = self.env["book.shelf.line"].search(
                [("book_shelf_id", "in", book)]
            )
            for line in book_line:
                line.write({"issue_date": date.today()})
            self.env["book.shelf"].browse(book).write({"state": "confirm"})

    def action_confirm(self):
        """inheriting action_confirm of sale order
        if sale order is generated by book shelf than it will call method _set_book to
        set issue date and return else simply return T-00419"""
        result = super().action_confirm()
        book = self.env["book.shelf"].search(
            [("sequence", "ilike", self.client_order_ref)]
        )
        if not book:
            return result
        self._set_book()
        return result

    def action_open_book(self):
        """action to open particular book order from sale order using smart button T-00419"""
        self.ensure_one()
        book_count = self.book_shelf_count
        if book_count > 1:
            return {
                "type": "ir.actions.act_window",
                "name": "Book",
                "res_model": "book.shelf",
                "view_mode": "tree,form",
                "domain": [("sequence", "=", self.client_order_ref)],
                "target": "current",
            }
        else:
            return {
                "type": "ir.actions.act_window",
                "name": "Book",
                "res_model": "book.shelf",
                "view_mode": "form",
                "res_id": self.env["book.shelf"]
                .search([("sequence", "=", self.client_order_ref)])
                .id,
            }
